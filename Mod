Fast power
ll fp(ll x, ll y, int mod) {
    if (y == 0) return 1;
    if (y == 1) return x % mod;
    ll r = fp(x, y >> 1, mod);
    return (((r * r) % mod) * power(x, y & 1, mod)) % mod;
}
Sum of powers
// return a ^ 1 + a ^ 2 + a ^ 3 + .... a ^ k
ll sumPower(ll a, ll k, int mod) {
	if (k == 1) return a % mod;
	ll half = sumPower(a, k / 2, mod);
	ll p = half * power(a, k / 2, mod) % mod;
	p = (p + half) % mod;
	if (k & 1) p = (p + power(a, k, mod)) % mod;
	return p;
}
Mod Inverse
ll modInverse(ll b, ll mod) { // if mod is Prime
    return power(b, mod - 2, mod);
}
ll modInverse(ll b, ll mod) { // if mod is not Prime,gcd(a,b) must be equal 1
    return power(b, phi_function(mod) - 1, mod);
}
